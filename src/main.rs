use crate::player::player_entity::Player;
use macroquad::prelude::*;

////////////////////////////////////////////////////////////
// start-region: -->      Mods
////////////////////////////////////////////////////////////
pub mod player;
////////////////////////////////////////////////////////////
// __end-region: <--      Mods
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// start-region: -->      CONSTANTS
////////////////////////////////////////////////////////////
pub(crate) const PLAYER_SIZE: Vec2 = const_vec2!([150f32, 40f32]);
pub(crate) const PLAYER_SPEED: f32 = 700f32;
////////////////////////////////////////////////////////////
// __end-region: <--      CONSTANTS
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// start-region: -->      MAIN
////////////////////////////////////////////////////////////

/// Main
///
/// # Docs Macroquad
/// https://macroquad.rs/docs/
#[macroquad::main("Breakout")]
async fn main() {
    let mut player = Player::new();
    loop {
        player.update(get_frame_time());
        clear_background(VIOLET);
        player.draw();
        next_frame().await
    }
}

////////////////////////////////////////////////////////////
// __end-region: <--      MAIN
////////////////////////////////////////////////////////////

// pub fn update_control_classic(&mut self, delta_time: f32) {
//     let mut x_move = 0f32;
//     if is_key_down(KeyCode::Left) {
//         x_move -= 1f32;
//     }
//     if is_key_down(KeyCode::Right) {
//         x_move += 1f32;
//     }
// }
